// Centralized type definitions for the newsletter editor store.
// Keeping these separate avoids large monolithic store files and helps re-use across components.

import { Theme } from '@/lib/themes';
import { Layout, LayoutVariant } from '@/features/newsletter/utils/layouts';
import { CalendarData } from '@/features/calendar/types';

export type TextBlock = {
  id: string;
  type: 'text';
  title: string;
  content: string;
  locked?: boolean; // when true, block cannot be edited or deleted until unlocked
};

export type ImageElement = {
  id: string;
  type: 'image';
  src: string;
  x: number;
  y: number;
  width: number;
  height: number;
  locked?: boolean;
};

export type HorizontalLineElement = {
  id: string;
  type: 'horizontalLine';
  x: number;
  y: number;
  width: number | string;
  height?: number; // Height for SVG scaling
  color: string;
  thickness: number;
  style: 'solid' | 'dashed' | 'dotted' | 'clipart' | 'shadow';
  clipartSrc?: string;
  locked?: boolean; // when true, position / style cannot change or be deleted
  // Auto-generated from layout decorations (non-user-originated)
  autoGenerated?: boolean;
  decorationKey?: string; // stable key layoutId:variant:position:sectionIndex
};

export type SelectableElement = (TextBlock | ImageElement | HorizontalLineElement) & { type: 'text' | 'image' | 'horizontalLine' };

export type CalendarDateElement = {
  id: string; // dateKey format: 'YYYY-MM-DD'
  type: 'calendarDate';
  date: Date;
};

export type ExtendedSelectableElement = SelectableElement | CalendarDateElement;

export type LayoutSelection = {
  base: Layout;
  variant: LayoutVariant;
};

export type SectionStyle = {
  backgroundColor?: string;
  textColor?: string;
  contentColor?: string;
  fontFamily?: string;
  contentFontFamily?: string;
  headingColor?: string;
  headingBackgroundColor?: string;
  headingFontFamily?: string;
  borderColor?: string;
  borderWidth?: number;
  borderRadius?: number;
};

export type SectionStyles = {
  [blockId: string]: SectionStyle;
};

export type EditorSnapshot = {
  version: number;
  title: string;
  date: string;
  textBlocks: TextBlock[];
  textBlockMap?: Record<string, TextBlock>;
  textBlockOrder?: string[];
  images: ImageElement[];
  horizontalLines: HorizontalLineElement[];
  sectionStyles: SectionStyles;
  theme: Theme;
  layout: LayoutSelection;
  denseMode: boolean;
  // Calendar-specific data
  calendarData?: CalendarData;
};

export interface AppState {
  textBlocks: TextBlock[];
  textBlockMap: Record<string, TextBlock>;
  textBlockOrder: string[];
  horizontalLines: HorizontalLineElement[];
  selectedElement: { id: string; type: 'text' | 'image' | 'horizontalLine' | 'calendarDate'; subType?: 'title' | 'content' } | null;
  sectionStyles: SectionStyles;
  theme: Theme;
  layout: LayoutSelection;
  denseMode: boolean;
  // Calendar-specific state
  calendarData: CalendarData;
  // Caret tracking for reflecting cursor position on canvas
  editingCaret?: { blockId: string; field: 'title' | 'content'; index: number } | null;

  // Calendar cell editing actions
  setEditingDateKey?: (key: string | null) => void;
  setDraftContent?: (content: string) => void;
  
  setTitle: (title: string) => void;
  setDate: (date: string) => void;
  addTextBlock: () => void;
  updateTextBlock: (id: string, property: 'title' | 'content', value: string) => void;
  selectElement: (id: string | null, type?: 'text' | 'image' | 'horizontalLine' | 'calendarDate', subType?: 'title' | 'content') => void;
  updateStyle: (blockId: string, newStyles: Partial<SectionStyle>) => void;
  setTheme: (theme: Theme) => void;
  setThemeTitleFont?: (font: string) => void;
  setThemeDateFont?: (font: string) => void;
  setThemeTitleColor?: (color: string) => void;
  setThemeDateColor?: (color: string) => void;
  setThemeTitleAlignment?: (align: 'left' | 'center' | 'right') => void;
  setThemeDateAlignment?: (align: 'left' | 'center' | 'right') => void;
  setThemeTitleTextEffect?: (effectId: string | undefined) => void;
  setThemePageBackgroundColor?: (color: string) => void;
  setThemePageBackgroundImage?: (image: string | null) => void;
  setThemePageBackgroundSize?: (size: string | null) => void;
  setThemePageBackgroundPosition?: (position: string | null) => void;
  setThemePageBackgroundRepeat?: (repeat: string | null) => void;
  setThemePageBackgroundImageOpacity?: (opacity: number) => void;
  setSectionCount: (count: number) => void;
  loadSnapshot: (snapshot: EditorSnapshot) => void;
  swapTextBlocks: (id1: string, id2: string) => void;
  setDenseMode: (denseMode: boolean) => void;
  
  setEditingCaret?: (blockId: string, field: 'title' | 'content', index: number) => void;
}

export interface ElementSelection {
  id: string;
  type: 'text' | 'image' | 'horizontalLine';
}

export interface ZoomControls {
  zoom: number;
  onZoomIn: () => void;
  onZoomOut: () => void;
  onResetZoom: () => void;
}

export interface CanvasConfig {
  width: string;
  height: string;
  scale: number;
}
