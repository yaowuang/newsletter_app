// Centralized type definitions for the newsletter editor store.
// Keeping these separate avoids large monolithic store files and helps re-use across components.

import { Theme } from '@/lib/themes';
import { Layout, LayoutVariant } from '@/lib/layouts';

export type TextBlock = {
  id: string;
  type: 'text';
  title: string;
  content: string;
  locked?: boolean; // when true, block cannot be edited or deleted until unlocked
};

export type ImageElement = {
  id: string;
  type: 'image';
  src: string;
  x: number;
  y: number;
  width: number;
  height: number;
  locked?: boolean;
};

export type HorizontalLineElement = {
  id: string;
  type: 'horizontalLine';
  x: number;
  y: number;
  width: number | string;
  height?: number; // Height for SVG scaling
  color: string;
  thickness: number;
  style: 'solid' | 'dashed' | 'dotted' | 'clipart' | 'shadow';
  clipartSrc?: string;
  locked?: boolean; // when true, position / style cannot change or be deleted
  // Auto-generated from layout decorations (non-user-originated)
  autoGenerated?: boolean;
  decorationKey?: string; // stable key layoutId:variant:position:sectionIndex
};

export type SelectableElement = (TextBlock | ImageElement | HorizontalLineElement) & { type: 'text' | 'image' | 'horizontalLine' };

export type LayoutSelection = {
  base: Layout;
  variant: LayoutVariant;
};

export type SectionStyle = {
  backgroundColor?: string;
  textColor?: string;
  contentColor?: string;
  fontFamily?: string;
  contentFontFamily?: string;
  headingColor?: string;
  headingBackgroundColor?: string;
  headingFontFamily?: string;
  borderColor?: string;
  borderWidth?: number;
  borderRadius?: number;
};

export type SectionStyles = {
  [blockId: string]: SectionStyle;
};

export type EditorSnapshot = {
  version: number;
  title: string;
  date: string;
  textBlocks: TextBlock[];
  images: ImageElement[];
  horizontalLines: HorizontalLineElement[];
  sectionStyles: SectionStyles;
  theme: Theme;
  layout: LayoutSelection;
  denseMode: boolean;
};

export interface AppState {
  title: string;
  date: string;
  textBlocks: TextBlock[];
  images: ImageElement[];
  horizontalLines: HorizontalLineElement[];
  selectedElement: { id: string; type: 'text' | 'image' | 'horizontalLine' } | null;
  sectionStyles: SectionStyles;
  theme: Theme;
  layout: LayoutSelection;
  denseMode: boolean;
  
  setTitle: (title: string) => void;
  setDate: (date: string) => void;
  addTextBlock: () => void;
  addHorizontalLine: (props?: Partial<HorizontalLineElement>) => void;
  updateHorizontalLine: (id: string, newProps: Partial<HorizontalLineElement>) => void;
  addImage: () => void;
  updateTextBlock: (id: string, property: 'title' | 'content', value: string) => void;
  updateImage: (id: string, newProps: Partial<ImageElement>) => void;
  selectElement: (id: string | null, type?: 'text' | 'image' | 'horizontalLine') => void;
  deleteElement: (id: string, type: 'text' | 'image' | 'horizontalLine') => void;
  setElementLocked: (id: string, type: 'text' | 'image' | 'horizontalLine', locked: boolean) => void;
  updateStyle: (blockId: string, newStyles: Partial<SectionStyle>) => void;
  setTheme: (theme: Theme) => void;
  setThemeTitleFont?: (font: string) => void;
  setThemeDateFont?: (font: string) => void;
  setThemeTitleColor?: (color: string) => void;
  setThemeDateColor?: (color: string) => void;
  setThemeTitleAlignment?: (align: 'left' | 'center' | 'right') => void;
  setThemeDateAlignment?: (align: 'left' | 'center' | 'right') => void;
  setThemePageBackgroundColor?: (color: string) => void;
  setThemePageBackgroundImage?: (image: string | null) => void;
  setThemePageBackgroundSize?: (size: string | null) => void;
  setThemePageBackgroundPosition?: (position: string | null) => void;
  setThemePageBackgroundRepeat?: (repeat: string | null) => void;
  setThemePageBackgroundImageOpacity?: (opacity: number) => void;
  setLayout: (layout: LayoutSelection) => void;
  setSectionCount: (count: number) => void;
  loadSnapshot: (snapshot: EditorSnapshot) => void;
  swapTextBlocks: (id1: string, id2: string) => void;
  setDenseMode: (denseMode: boolean) => void;
}
