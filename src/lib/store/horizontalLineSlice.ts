import { nanoid } from "nanoid";
import type { StateCreator } from "zustand";
import type { HorizontalLineElementType } from "@/features/newsletter/types";
import { horizontalLineLibrary } from "../horizontalLines";
import type { RootStore } from ".";

export interface HorizontalLineSlice {
  horizontalLines: HorizontalLineElementType[];
  addHorizontalLine: (props?: Partial<HorizontalLineElementType>) => void;
  updateHorizontalLine: (id: string, newProps: Partial<HorizontalLineElementType>) => void;
  deleteHorizontalLine: (id: string) => void;
  setElementLocked_horizontalLine: (id: string, locked: boolean) => void;
}

export const createHorizontalLineSlice: StateCreator<HorizontalLineSlice, [], [], HorizontalLineSlice> = (
  set,
  get,
) => ({
  horizontalLines: [],
  addHorizontalLine: (props = {}) => {
    const defaultLibItem = horizontalLineLibrary.find((item) => item.id === "classic-solid");
    const theme = (get() as RootStore).theme;
    const defaultColor = props.color || defaultLibItem?.defaultColor || theme?.styles?.section?.borderColor || "#888";
    const newLine: HorizontalLineElementType = {
      id: nanoid(),
      type: "horizontalLine",
      x: 40,
      y: 140,
      width: 400,
      height: 24,
      color: defaultColor,
      thickness: 2,
      style: "solid",
      ...props,
    };
    set((state) => ({ horizontalLines: [...state.horizontalLines, newLine] }));
  },
  updateHorizontalLine: (id, newProps) => {
    set((state) => ({
      horizontalLines: state.horizontalLines.map((line) => {
        if (line.id !== id) return line;
        if (line.locked && !line.autoGenerated && !("locked" in newProps)) return line;
        return { ...line, ...newProps };
      }),
    }));
  },
  deleteHorizontalLine: (id) => {
    set((state) => {
      if (state.horizontalLines.find((l) => l.id === id && l.locked)) return { ...state };
      return {
        horizontalLines: state.horizontalLines.filter((l) => l.id !== id),
      };
    });
  },
  setElementLocked_horizontalLine: (id, locked) => {
    set((state) => ({
      horizontalLines: state.horizontalLines.map((line) => (line.id === id ? { ...line, locked } : line)),
    }));
  },
});
